#!/usr/bin/env bash

set -euo pipefail

ASDF_DIRECTORY="$HOME/.asdf"
HOSTNAME="$(hostname -s)"

something_already_printed=0

pad-from-existing-output() {
  if [[ $something_already_printed -eq 1 ]]; then
    echo
  fi
}

print-with-color() {
  pad-from-existing-output
  echo -ne "\033[${1}m"
  echo -n "${@:2}"
  echo -e "\033[0m"
  something_already_printed=1
}

banner() {
  print-with-color 34 "== $@ =="
}

success() {
  print-with-color 32 "$@"
}

error() {
  print-with-color 31 "$@"
}

latest-version-of() {
  asdf list $1 | \
    grep -v 'preview\|dev' | \
    egrep '^\s*\*?\d' | \
    tail -n 1 | \
    sed -Ee 's/^[ ]+//g'
}

set-hostname() {
  local specified_hostname
  local new_hostname

  banner "Setting hostname"

  echo -n "Enter a hostname (or press Enter to skip): "
  read -r specified_hostname
  if [[ "$specified_hostname" != "" ]]; then
    new_hostname="${specified_hostname%.local}.local"
    echo "Setting hostname to $new_hostname"
    hostname "$new_hostname"
  fi
}

if ! type brew &>/dev/null; then
  if [[ -e /usr/local/Cellar || -e /opt/homebrew ]]; then
    error "It looks like Homebrew is already installed."
    echo "Try starting a new terminal session and then restarting this script."
    exit 1
  else
    banner "Installing Homebrew"
    /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"

    echo
    success "Homebrew is now installed."
    echo "Please make a new tab and re-run this script."
    exit
  fi
fi

if ! [[ -e "/Applications/1Password.app" ]]; then
  banner "Installing 1Password..."
  HOMEBREW_NO_INSTALL_UPGRADE=true brew install 1password

  echo
  echo "At this point you need to sign into 1Password."
  echo "Once you've done that, re-run this script."
  exit 1
fi

if ! type mas &>/dev/null; then
  banner "Installing mas-cli..."
  HOMEBREW_NO_INSTALL_UPGRADE=true brew install mas-cli/tap/mas
  mas_was_just_installed=1

  banner "Making sure that you are signed into the App Store"
  if ! mas account &>/dev/null; then
    error "It doesn't look like you are signed into the App Store."
    echo "Please do that and then rerun this script."
    exit 1
  fi
fi

banner "Installing missing Homebrew packages"
for pkg in \
  1password-cli \
  ag \
  asdf \
  autojump \
  awscli \
  colordiff \
  coreutils \
  direnv \
  fzf \
  git \
  git-delta \
  grip \
  hub \
  jq \
  libxml2 \
  libxslt \
  neovim \
  overmind \
  reattach-to-user-namespace \
  redis \
  restic \
  sqlite \
  tig \
  tmux \
  tree \
  universal-ctags \
  watchexec \
  yq \
  zoxide \
  creativeprojects/tap/resticprofile \
  heroku/brew/heroku \
  mas-cli/tap/mas
do
  banner "Installing $pkg"
  HOMEBREW_NO_INSTALL_UPGRADE=true brew install $pkg || error "Package $pkg failed to install, continuing..."
done

for app in \
  dash \
  dropbox \
  homebrew/cask/font-fira-code \
  homebrew/cask/font-caskaydia-mono-nerd-font \
  google-chrome \
  iterm2 \
  moom \
  ngrok \
  notion \
  numi \
  obsidian \
  postman \
  rectangle \
  slack \
  spotify \
  stay \
  visual-studio-code \
  wifi-explorer
do
  banner "Installing $app"
  HOMEBREW_NO_INSTALL_UPGRADE=true brew install --cask $app || error "App $app failed to install, continuing..."
done

mas_apps=(
  # Amphetamine
  937984704
  # Todoist
  585829637
)

for app in "${mas_apps[@]}"; do
  banner "Installing $app"
  mas install $app || error "App $app failed to install, continuing..."
done

if ! [[ -d "$HOME/.zsh-async" ]]; then
  banner "Installing zsh-async"
  rm -rf "$HOME/.zsh-async"
  mkdir "$HOME/.zsh-async"
  curl -L https://api.github.com/repos/mafredri/zsh-async/tarball | \
    tar -x -z -f - -C "$HOME/.zsh-async" --strip-components 1
fi

if [[ -f /etc/zprofile ]]; then
  banner "Moving macOS's default zprofile out of the way"
  sudo mv /etc/zprofile /etc/zprofile.old
fi

if ! type asdf &>/dev/null; then
  banner "Loading asdf"
  source $ASDF_DIRECTORY/asdf.sh
fi

for language in ruby python nodejs; do
  if ! [[ -d $ASDF_DIRECTORY/plugins/$language ]]; then
    banner "Installing $language plugin for asdf"
    asdf plugin add $language

    if [[ $language == "nodejs" && -d ~/.gnupg ]]; then
      # Fix permissions on ~/.gnupg, which will be off on a fresh installation
      # Source: <https://gist.github.com/oseme-techguy/bae2e309c084d93b75a9b25f49718f85>
      chown -R $(whoami) ~/.gnupg/
      chmod 600 ~/.gnupg/*
      chmod 700 ~/.gnupg
    fi
  fi

  if [[ ! -d "$ASDF_DIRECTORY/installs/$language" || $(ls "$ASDF_DIRECTORY/installs/$language" | wc -l | sed -e 's/^ *//') -eq 0 ]]; then
    banner "Installing latest version of $language"

    asdf install $language latest
  fi

  latest_available_version="$(latest-version-of $language)"
  latest_installed_version="$(cat ~/.tool-versions | grep "^$language" | sed -e "s/^$language //")"

  if [[ -z "$latest_available_version" ]]; then
    echo "Could not determine available version of $language, skipping"
    continue
  fi

  if [[ -z "$latest_installed_version" ]]; then
    echo "Could not determine installed version of $language, skipping"
    continue
  fi

  if [[ "$latest_available_version" != "$latest_installed_version" ]]; then
    banner "Making latest version of $language ($latest_available_version) the default"
    asdf set --home $language "$latest_available_version"
  fi
done

if gem which neovim &>/dev/null; then
  banner "Installing Ruby plugin for Neovim"
  gem install neovim
fi

if pip show neovim &>/dev/null; then
  banner "Installing Python plugin for Neovim"
  pip install neovim
fi

banner "Upgrading pip"
pip install --upgrade pip

set-hostname

banner "Initializing Restic repositories"
if ! [[ -f ~/Library/Preferences/resticprofile/profiles.json ]]; then
  mkdir -p ~/Library/Preferences/resticprofile
  cp -v extras/resticprofile/profiles.json ~/Library/Preferences/resticprofile/profiles.json
fi
if [[ -f ~/Library/Preferences/resticprofile/profiles.json ]] && grep -E '<<RSYNC_NET_USERNAME>>|<<HOSTNAME>>' ~/Library/Preferences/resticprofile/profiles.json &>/dev/null; then
  echo "Please replace the RSYNC_NET_USERNAME and HOSTNAME placeholders in ~/Library/Preferences/resticprofile/profiles.json and re-run this script."
  exit 1
fi
if ! [[ -f ~/Library/Preferences/resticprofile/rsync_net_password.txt ]]; then
  echo "Please generate a password for the rsync.net Restic repository (ideally using 1Password) and write it to ~/Library/Preferences/resticprofile/rsync_net_password.txt."
  exit 1
fi
if ! [[ -f ~/Library/Preferences/resticprofile/local_password.txt ]]; then
  echo "Please generate a password for the local Restic repository (ideally using 1Password) and write it to ~/Library/Preferences/resticprofile/local_password.txt."
  exit 1
fi
if ! resticprofile --name rsync_net snapshots &>/dev/null; then
  resticprofile --name rsync_net init
fi
if ! resticprofile --name local snapshots &>/dev/null; then
  resticprofile --name local init
fi
echo "Restic repositories initialized."

banner "Making a bunch of configuration changes to MacOS"
extras/macos.sh

success "Done! At this point you probably want to log out and log back in again."
