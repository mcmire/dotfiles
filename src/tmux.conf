# A lot of this was stolen from:
#
# * https://github.com/zolrath/dotfiles/blob/master/tmux.conf
# * https://github.com/alanyjw/dotfiles/blob/master/home/.tmux.conf
# * https://www.reddit.com/r/tmux/comments/3paqoi/tmux_21_has_been_released/

### Basics

# Load TPM and any TPM plugins.
set-option -g @plugin "tmux-plugins/tpm"
set-option -g @plugin "NHDaly/tmux-scroll-copy-mode"

# Update prefix: Use Ctrl-Space instead of Ctrl-B.
unbind-key C-b
set-option -g prefix C-Space
bind-key C-Space last-window

# Use zsh when running commands.
set-option -g default-shell $SHELL

# Ensure that keys work under xterms.
set-window-option -g xterm-keys on

### Sessions

# By default `s` allows you to choose windows within all sessions. We don't need
# to do this; we just want to choose the session.
bind-key s choose-session -O time

### Windows

# Bind `|` to break out a horizontal pane; bind `-` to break out a vertical pane.
# We don't use Vim shortcuts here because `s` is already bound to switching
# sessions.
bind-key | split-window -h -c "#{pane_current_path}"
bind-key - split-window -v -c "#{pane_current_path}"

# Make it so that we can use Vim mappings to switch between Vim and tmux
# (Ctrl-H, -J, -K, -L).
is_vim="ps -o state= -o comm= -t '#{pane_tty}' \
    | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?(view|n?vim?x?)(diff)?$'"
bind-key -n C-h if-shell "$is_vim" "send-keys C-h" "select-pane -L"
bind-key -n C-j if-shell "$is_vim" "send-keys C-j" "select-pane -D"
bind-key -n C-k if-shell "$is_vim" "send-keys C-k" "select-pane -U"
bind-key -n C-l if-shell "$is_vim" "send-keys C-l" "select-pane -R"
bind-key -T copy-mode-vi C-h if-shell "$is_vim" "send-keys C-h" "select-pane -L"
bind-key -T copy-mode-vi C-j if-shell "$is_vim" "send-keys C-j" "select-pane -D"
bind-key -T copy-mode-vi C-k if-shell "$is_vim" "send-keys C-k" "select-pane -U"
bind-key -T copy-mode-vi C-l if-shell "$is_vim" "send-keys C-l" "select-pane -R"

# Map <prefix>+H, +J, +K, +L for easily resizing panes.
bind-key -r H resize-pane -L 10
bind-key -r J resize-pane -D 10
bind-key -r K resize-pane -U 10
bind-key -r L resize-pane -R 10

# Make it easier to switch windows (you can also still reference windows by
# name).
#bind-key e previous-window
#bind-key C-e previous-window
#bind-key t next-window
#bind-key C-t next-window

# Start window numbers at 1 to match keyboard order with tmux window order.
set-option -g base-index 1

# Renumber windows sequentially after closing any of them.
set-option -g renumber-windows on

# Rebind new-window to retain current working directory.
# See: <http://unix.stackexchange.com/questions/12032/create-new-window-with-current-directory-in-tmux>
bind-key c new-window -c "#{pane_current_path}"

# Autorename windows based on the currently running command.
set-window-option -g automatic-rename on

### Copying and pasting

# Allow copy and paste with tmux. Also get Selenium to run properly.
set-option -g default-command "reattach-to-user-namespace -l ${SHELL}"

# Use Vim-like bindings for copy mode.
set-window-option -g mode-keys vi

# Make copying just like Vim.
bind-key -T copy-mode-vi v send-keys -X begin-selection
bind-key -T copy-mode-vi y send-keys -X copy-pipe "reattach-to-user-namespace pbcopy" \; send-keys -X clear-selection \; display-message "Copied."

# Update Enter to also copy (and don't scroll back down to the bottom).
unbind-key -T copy-mode-vi Enter
bind-key -T copy-mode-vi Enter send-keys -X copy-pipe "reattach-to-user-namespace pbcopy" \; send-keys -X clear-selection \; display-message "Copied."

# Copy when mouse is released (but don't scroll back down to the bottom).
bind-key -T copy-mode-vi MouseDragEnd1Pane send-keys -X copy-pipe "reattach-to-user-namespace pbcopy" \; send-keys -X clear-selection \; display-message "Copied."

# Make page up & down automatically enter & exit copy mode.
bind-key -T root PPage if-shell -F "#{alternate_on}" "send-keys PPage" "copy-mode -e; send-keys PPage"
bind-key -T copy-mode-vi PPage send-keys -X page-up
bind-key -T copy-mode-vi NPage send-keys -X page-down

### Appearance

# Put the status bar at the top (since the Vim status line is at the bottom).
set-option -g status-position top

# Enable RGB color support.
#
# See this page for testing this: <https://gist.github.com/XVilka/8346728>
# This was adapted from: <https://github.com/tmux/tmux/issues/1246>
# and added in tmux in: <https://github.com/tmux/tmux/commit/427b8204268af5548d09b830e101c59daa095df9>
# You can also download `pastel` (available on Homebrew) and run
#
#     pastel colorcheck
#
# to double check RGB color support both in and outside of tmux.
#
set -g default-terminal "tmux-256color"
set-option -ga terminal-overrides ",*256col*:Tc"

# Load initial color scheme settings
run-shell ~/.tmux/auto-set-color-scheme.sh

### Activity

# Turn off status updates for right now.
# For some reason, on El Capitan, notifyd keeps spawning and using a lot of CPU
# which is causing periodic lags. This seems to fix it for now. See:
# <https://github.com/tmux/tmux/issues/108>
set-option -g status-interval 0

# Please don't flash the screen to alert me about anything!
set-option -g visual-activity off

### Optimizations

# Don't wait after pressing Escape.
set-option -sg escape-time 0

# Allow prefixed commands to be repeated without having to use the prefix again.
# This is useful when resizing windows.
set-option -sg repeat-time 600

### Other stuff

# Enable mouse support.
set-option -g mouse on

# This is necessary for the Vim tmux-focus-events plugin to work.
# See: <https://github.com/tmux-plugins/vim-tmux-focus-events>
set-option -g focus-events on

# Greatly increase scrollback memory.
set-option -g history-limit 50000

### Configuration

# Make it easy to reload the config from within tmux.
bind-key r source-file ~/.tmux.conf \; display "Reloaded ~/.tmux.conf"

### Custom file

if-shell '[[ -e ~/.tmux.conf.local ]]' 'source-file ~/.tmux.conf.local'

### Fin

# Install TPM plugins if necessary.
if "test ! -d ~/.tmux/plugins/tpm" \
  "run 'git clone https://github.com/tmux-plugins/tpm ~/.tmux/plugins/tpm && ~/.tmux/plugins/tpm/bin/install_plugins'"
# Finish running TPM. (When reloading, this will fail, so use `true` to ignore
# the errors.)
run "$HOME/.tmux/plugins/tpm/tpm | true"
