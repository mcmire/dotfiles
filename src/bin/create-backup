#!/bin/bash

source "$HOME/.config/core-helpers.sh"

## Internal variables

NOW="$(date +"%s")"
PID_FILE_DIRECTORY=/tmp
PID_FILE_PATH="$PID_FILE_DIRECTORY/create-backup.pid"
LOCKED_EXIT_CODE=-700
NEXT_SCHEDULED_TIME_FILE_PATH="$HOME/Library/Caches/create-backup.next.time"
LOG_FILE_PATH="$HOME/Library/Logs/create-backup/$(date -j -f "%s" "$NOW" +"%Y%m%d_%H%M%S").log"

log_started=1
already_locked=0

## Parameters

restic_profile_name=
restic_args=()
as_launch_agent=0
always_run=0
dry_run=0

### Actions

print-usage() {
  cat <<EOT
Create a new backup using Restic (via \`resticprofile\`).

$0 --profile-name <restic-profile-name> [<options>] [<resticprofile-options>] [-- <restic-options>]

ARGUMENTS
---------

<restic-profile-name>
  The name of a profile in ~/Library/Preferences/resticprofile/profiles.json.
  This script expects this file to already exist.

<options>
  --as-launch-agent
    Logs the results of the backup command to a log file. Also enables
    additional logic which will refuse to create a new backup if the computer is
    not plugged in, if it is connected to a public WiFi network, or if a backup
    was already created less than a day ago. This option is passed by the launch
    agent that runs this command periodically.

  --always-run
    Overrides the logic introduced by --as-launch-agent (i.e. still create a
    backup even if on battery or on a public WiFi network), but still logs the
    results of the backup command to a log file so it can be monitored while it
    runs and audited after the fact.

  -h, --help
    Print this message and exit.

<resticprofile-options>
  The same options that \`resticprofile\` takes.

<restic-options>
  The same options that \`restic\` takes.
EOT
}

parse-args() {
  local processing_restic_args=0

  while [[ $# -gt 0 ]]; do
    case "$1" in
      --profile-name | -p)
        restic_profile_name="$2"
        shift 2
        ;;
      --as-launch-agent)
        as_launch_agent=1
        shift
        ;;
      --always-run)
        always_run=1
        shift
        ;;
      --help | -h)
        print-usage
        exit 0
        ;;
      --)
        processing_restic_args=1
        shift
        ;;
      *)
        if [[ "$1" == "--dry-run" ]]; then
          dry_run=1
        fi
        if [[ -z "$restic_profile_name" ]]; then
          restic_profile_name="$1"
        elif [[ $processing_restic_args -eq 1 ]]; then
          restic_args+=("$1")
        else
          resticprofile_args+=("$1")
        fi
        shift
        ;;
    esac
  done

  if [[ $as_launch_agent -eq 1 ]]; then
    set-color-mode "false"
  else
    set-color-mode "true"
  fi
}

validate-args() {
  if [[ -z "$restic_profile_name" ]]; then
    {
      error "Missing profile name."
      echo
      print-usage
    } 2>&1 | log
    exit 1
  fi
}

cleanup() {
  log-end || true

  if [[ $already_locked -eq 0 ]]; then
    unlock
  fi
}

lock() {
  if [[ $dry_run -eq 0 ]]; then
    if [[ -f "$PID_FILE_PATH" ]]; then
      if ps -p "$(cat "$PID_FILE_PATH")" >/dev/null; then
        error "A backup is already in the process of being created." | log
        already_locked=1
        exit $LOCKED_EXIT_CODE
      else
        rm "$PID_FILE_PATH"
      fi
    else
      echo $$ > "$PID_FILE_PATH"
    fi
  fi
}

unlock() {
  rm -f "$PID_FILE_PATH"
}

get-next-scheduled-time() {
  if [[ -f "$NEXT_SCHEDULED_TIME_FILE_PATH" ]]; then
    cat "$NEXT_SCHEDULED_TIME_FILE_PATH"
  else
    echo "$NOW"
  fi
}

has-scheduled-time-been-reached() {
  local next_scheduled_time

  next_scheduled_time=$(get-next-scheduled-time)

  [[ $dry_run -eq 1 || $always_run -eq 1 || $NOW -gt $next_scheduled_time || $NOW -eq $next_scheduled_time ]]
}

update-next-scheduled-time() {
  local next_scheduled_time

  if [[ $dry_run -eq 0 ]]; then
    next_scheduled_time=$(date -j -v "+1d" -f "%s" "$NOW" +"%s")
    echo "Updating next scheduled time to: $(date -j -f "%s" "$next_scheduled_time" +"%+")"
    echo $next_scheduled_time > "$NEXT_SCHEDULED_TIME_FILE_PATH"
  fi
}

is-connected-to-power() {
  [[ $dry_run -eq 1 || $always_run -eq 1 || "$(pmset -g ps | head -1)" =~ "AC Power" ]]
}

log() {
  if [[ $as_launch_agent -eq 1 && $dry_run -eq 0 ]]; then
    "$HOME/.bin/log" --log-file "$LOG_FILE_PATH" -
  else
    cat
  fi
}

log-start() {
  if [[ $as_launch_agent -eq 1 ]]; then
    {
      echo "***********************************************"
      echo "----------------------------------------"
      echo "User: $USER"
      echo "Date: $(date -j -f "%s" "$NOW" +"%+")"
      echo "Next scheduled time: $(date -j -f "%s" "$(get-next-scheduled-time)" +"%+")"
      echo "Current directory: $PWD"
      echo "----------------------------------------"
      echo
    } | log

    log_started=1
  fi
}

log-start-of-output() {
  if [[ $as_launch_agent -eq 1 ]]; then
    echo "---[ START OF OUTPUT ]-----------" | log
  fi
}

log-end-of-output() {
  if [[ $as_launch_agent -eq 1 ]]; then
    echo "---[ END OF OUTPUT   ]-----------" | log
  fi
}

log-scheduled-time-not-reached() {
  echo "Not time to run yet. Aborting." | log
}

log-not-connected-to-power() {
  echo "Not connected to power. Aborting." | log
}

log-end() {
  if [[ $as_launch_agent -eq 1 && $log_started -eq 1 ]]; then
    {
      echo "***********************************************"
      echo
    } | log
  fi
}

notify() {
  if [[ $as_launch_agent -eq 1 && $dry_run -eq 0 ]]; then
    /opt/homebrew/bin/terminal-notifier "$@"
  fi
}

notify-start() {
  notify -title "Backup" -message "New backup starting..."
}

notify-end() {
  local exitcode="$1"

  if [[ $exitcode -eq 0 ]]; then
    notify -title "Backup" -message "Backup ($restic_profile_name) created successfully."
  elif [[ $exitcode -eq 3 ]]; then
    notify -title "Backup" -message "Backup ($restic_profile_name) created successfully, but there were warnings. See log file for more: $LOG_FILE_PATH"
  else
    notify -title "Backup" -message "Backup ($restic_profile_name) failed to be created (exit code $exitcode). See log file for more: $LOG_FILE_PATH"
  fi
}

build-backup-command() {
  echo /opt/homebrew/bin/resticprofile

  echo "--name"
  echo "$restic_profile_name"

  for arg in "${resticprofile_args[@]}"; do
    echo "$arg"
  done

  echo "backup"
  echo "--verbose"
  echo "--verbose"

  for arg in "${restic_args[@]}"; do
    echo "$arg"
  done
}

run-backup-command() {
  local command_as_lines
  local command_name
  local command_args_as_lines
  local command=()
  local output

  command_as_lines="$(build-backup-command)"
  while IFS=$'\n' read -r line; do
    command+=("$line")
  done <<< "$command_as_lines"

  command_name="$(echo "$command_as_lines" | head -n 1)"
  command_args_as_lines="$(echo "$command_as_lines" | tail -n '+2')"

  {
    echo "Running command:" "${command[*]}"
    echo
  } | log

  log-start-of-output || true

  export PATH="/opt/homebrew/bin:$PATH"

  output=$(echo -e "$command_args_as_lines" | xargs "$command_name" 2>&1)
  echo "$output"

  if [[ "$(echo "$output" | tail -n 1)" =~ "exit status ([[:digit:]]+)" ]]; then
    return ${BASH_REMATCH[1]}
  else
    return 0
  fi
}

main() {
  local exitcode

  parse-args "$@"

  trap cleanup INT TERM QUIT EXIT
  log-start || true

  lock
  validate-args

  if ! has-scheduled-time-been-reached; then
    log-scheduled-time-not-reached || true
    exit 2
  fi

  if ! is-connected-to-power; then
    log-not-connected-to-power || true
    exit 2
  fi

  notify-start || true

  run-backup-command 2>&1 | log
  exitcode=${PIPESTATUS[0]}
  log-end-of-output || true
  echo "Command completed with exit code $exitcode." | log

  notify-end "$exitcode" || true

  # 3 means that some files were skipped, but the backup was successful
  if [[ $exitcode -eq 0 || $exitcode -eq 3 ]]; then
    update-next-scheduled-time || exit $?
  fi

  return $exitcode
}

main "$@"
