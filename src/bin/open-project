#!/usr/bin/env bash

# Inspired by: <https://github.com/caarlos0/dotfiles.fish/blob/d0ee6e9fc5991c80b412a313e913b83c3289d257/bin/tmux-sessionizer>
# Also see: <https://carlosbecker.com/posts/tmux-sessionizer/>

print-with-color() {
  echo -ne "\033[${1}m"
  echo -n "${@:2}"
  echo -ne "\033[0m"
}

info() {
  print-with-color 34 "$@" $'\n'
}

error() {
  print-with-color 31 "ERROR:" "$@" $'\n'
}

search-for-project() {
  zoxide query --list --score "$1"
}

get-project-candidate-with-score() {
  local match

  while read -r query; do
    match="$(search-for-project "$query")"

    if [[ -n "$match" ]]; then
      echo "$match"
    elif [[ -d "$query" ]]; then
      echo "  -1.0 $query"
    fi
  done
}

get-all-projects() {
  find ~/code -mindepth 2 -maxdepth 2 -type d "$@"
}

get-project-candidates-with-scores() {
  local query="$1"
  local matches

  if [[ -z "$query" ]]; then
    # TODO: This is slow, is there a faster way to get the zoxide directory?
    get-all-projects | get-project-candidate-with-score
  else
    matches="$(search-for-project "$query")"

    if [[ -n "$matches" ]]; then
      echo "$matches"
    else
      get-all-projects -name "$query" | get-project-candidate-with-score
    fi
  fi
}

select-project() {
  local query="$1"

  if [[ -d "$query" ]]; then
    echo "$query"
  else
    get-project-candidates-with-scores "$query" | \
      sort --key 1 --numeric-sort --reverse | \
      fzf --query "$query" --no-sort --select-1 --exit-0 | \
      awk '{print $2}'
  fi
}

switch-to-guaranteed-tmux-session() {
  local tmux_session_name="$1"
  local project_directory="$2"

  if ! tmux has-session -t "=$tmux_session_name" &>/dev/null; then
    # -d prevents attaching to the current terminal (we will do that next)
    tmux new-session -d -s "$tmux_session_name" -c "$project_directory"
  fi
  tmux switch-client -t "=$tmux_session_name"
}

main() {
  local query="$1"

  if [[ -z "$TMUX" ]]; then
    error "It appears you are not in an active tmux session."
    error "Please start 'tmux' now, and then re-run this script."
    exit 1
  fi

  local resolved_project_directory="$(select-project "$query")"

  if [[ -z "$resolved_project_directory" ]]; then
    error "Could not find a project matching '$query'."
    exit 1
  fi

  # "Adding" is a misnomer here; we're just bumping the rank so the next time we
  # switch, this directory will be at the bottom of the fzf list (and will thus
  # be the one selected)
  zoxide add "$resolved_project_directory"

  local tmux_session_name="$(basename "$resolved_project_directory" | tr . _)"
  switch-to-guaranteed-tmux-session "$tmux_session_name" "$resolved_project_directory"
}

main "$@"
